using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using Robust.Client.ResourceManagement;
using Robust.Client.Utility;
using Robust.Shared.ContentPack;
using Content.Client.DeltaV.Arcade.S3D.Renderer;
using Content.Shared.DeltaV.Arcade.S3D;
using SixLabors.ImageSharp;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using SixLabors.ImageSharp.PixelFormats;
using Vector4 = Robust.Shared.Maths.Vector4;

namespace Content.Client.DeltaV.Arcade.S3D.UI;

[GenerateTypedNameReferences]
public sealed partial class S3DMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly IResourceManager _resourceManager = default!;

    private readonly S3DBoundUserInterface _owner;
    public S3DMenu(S3DBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _owner = owner;

        if (_entMan.TryGetComponent<S3DArcadeComponent>(owner.Owner, out var comp))
        {
            var renderer = new S3DRenderer(_resourceCache, comp, comp.WorldMap, LoadWallAtlas());
            renderer.SetSize = new Vector2(640, 480);
            renderer.CanKeyboardFocus = true;
            MainScreen.AddChild(renderer);
        }
    }
    protected override void KeyBindDown(GUIBoundKeyEventArgs args)
    {
        base.KeyBindDown(args);

        _owner.RegisterKeyPress(args.Function);
    }

    protected override void KeyBindUp(GUIBoundKeyEventArgs args)
    {
        base.KeyBindUp(args);

        _owner.UnregisterKeyPress(args.Function);
    }

    /// <summary>
    /// We need to load the texture into CPU memory because it's orders of magnitude faster if we are going to be accessing
    /// thousands of texels individually. Texture.GetPixel is so unperformant it's kind of useless unless you need a single
    /// pixel once.
    /// </summary>
    private Image<Rgba32> LoadWallAtlas()
    {
        var img = new Vector4[64, 64];

        if (!_resourceManager.TryContentFileRead("/Textures/DeltaV/Other/S3D/atlas.png", out var stream))
        {
            Logger.Error("Failed to load wall atlas for S3D!");
            return new Image<Rgba32>(64, 64);
        }

        var bmp = Image.Load<Rgba32>(stream);
        var span = bmp.GetPixelSpan();

        return bmp;
    }
}
